generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model User {
  id String @id @default(cuid())
  email String @unique
  password String
  role  Role  @default(CUSTOMER)
  address String?
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  session Session[]
  reviews  Review[]
  carts   Cart[]

  @@map("users")
}

enum Role {
  ADMIN
  CUSTOMER
}

model Session {
  id  String  @id @default(cuid())
  sid String  @unique
  data  Json
  expireAt  DateTime
  createAt  DateTime  @default(now())
  updateAt  DateTime @updatedAt
  userId  String
  user  User  @relation(fields: [userId], references: [id])
}

model Product {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String
  inStock     Int
  price       Float
  discount    Float?
  categories  ProductCategory[]
  catalogue   String
  variants    Variant[]
  images      Image[]    @relation("ProductImages")
  reviews     Review[]
  cartItem    CartItem[]
}

model Variant {
  id            String     @id @default(cuid())
  variantName   String
  variantValue  String
  variantPrice  Float
  variantInStock Int
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  images        Image[]     @relation("VariantImages")
}

model Category {
  id       String           @id @default(cuid())
  name     String           @unique
  products ProductCategory[]
}

model ProductCategory {
  productId  String
  product    Product         @relation(fields: [productId], references: [id])
  categoryId String
  category   Category        @relation(fields: [categoryId], references: [id])
  @@id([productId, categoryId])
}

model Image {
  id         String     @id @default(cuid())
  type       String
  url        String
  productId  String?
  variantId  String?
  product    Product?   @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
  variant    Variant?   @relation("VariantImages", fields: [variantId], references: [id], onDelete: Cascade)
}


model Review {
  id        String    @id @default(cuid())
  rating    Float
  comment   String?
  productId String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id  String  @id @default(cuid())
  userId  String
  user  User  @relation(fields:[userId], references: [id], onDelete: Cascade)
  items CartItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id  String  @id @default(cuid())
  cartId  String
  cart  Cart  @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

   createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}